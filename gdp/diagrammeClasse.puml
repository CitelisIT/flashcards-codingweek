@startuml

    title "Diagramme de classe CrocoCards"

    package "Modèle" <<Rectangle>> #DDFFDD {
        interface StrategyAlgorithm<<interface>>{
            + void computeSequence(int length, Deck deck, ArrayList<Card> sequenceCards)
        }
        class Observable{
            + void addObserver(Observer obs)
            + void triggerObservers()
        }
        class Content {
            - String data
            - String dateType
        }
        class Card {
            - int nbTimeUsed
            - int nbRightAnswer
            + int getScore()
        }
        class Deck {
            - String name
            - String description
            + void addCard()
            + void removeCard(Card card)
            + void updateCard(Card card)
            + Card getCard(int i)
            + int getScore()
        }
        class FlashCardManager {
        	+ void save()
            + void exportDeck(Deck deck)
            + void importDeck()
            + void exportDeckList()
            + void importDeckList()
            + void addDeck()
            + void removeDeck(Deck deck)
            + Deck getDeck(int i)
            + int getScore()
        }
        class Game {
            - int nbCardForGame
            - int currentCardIndex
            + void nextCard()
            + Card getCurrentCard()
        }
        class GapPriorityMode {}
        class KnownPriorityMode {}
        class RandomMode {}
    }

    package "Contrôleur" <<Rectangle>> #FFDDDD {
        interface Observer<<interface>>{
            + void react()
        }

        class GameLearningController {
			-FlashcardManager flashcardManager
			-int timer
			-int maxTimer
			-Timeline timeline
			-ProgressBar timerProgressBar
			-ProgressBar cardProgressBar
			-Button goodAnswerButton
			-Button badAnswerButton
			-Button goBackButton
			-Label gameDeckTitle
			-Label gameStatus
			-Label gameScore
			-VBox displayedVBox
			+void switchToHomeLearning()
			+void timerPlay()
			+void showAnswer()
			+void react()
		}
        class EditCreationController {
			-FlashcardManager flashcardManager
			-int activeDeck
			-int activeCard
			-int activeQuestionContent
			-int activeAnswerContent
			-Button buttonPressed
			-Button questionAddTextButton
			-Button questionAddMediaButton
			-Button answerAddTextButton
			-Button answerAddMediaButton
			-Button validationButton
			-VBox VboxQuestion
			-VBox VboxAnswer
			-TextField questionText
			-TextField answerText
			-TextField name
			-TextField description
			-VBox listCard
			-Button addCardButton
			-Button delCardButton
			-Button delContentQuestionButton
			-Button delContentAnswerButton
			+void switchToHomeCreation()
			+void addCard()
			+void delCard()
			+void addQuestionText()
			+void addQuestionMedia()
			+void addAnswerText()
			+void addAnswerMedia()
			+void delContentQuestion()
			+void delContentAnswer()
		}
        class HomeLearningController {
			-FlashcardManager flashcardManager
			-HashMap<String, ArrayList<Deck>> dico
			-Button buttonPressed
			-String currentDeckKey
			-int currentDeckIndex
			+Slider timerSlider
			+ChoiceBox<String> strategyChoiceBox
			+Spinner<Integer> nbCardSpinner
			+VBox rightPannel
			+Accordion accordion
			+Label titleLabel
			+Text descriptionLabel
			+Label strategyLabel
			+Label nbCardLabel
			+Button startButton
			+Label timerLabel
			+void switchToHomeCreation()
			+void startGame()
			+void switchToStats()
			+void switchToDecks()
			+Deck getCurrentDeck()
			+void showCard(Card card)
		}
        class HomeCreationController {
			-String currentName
			-String currentDescription
			-FlashcardManager flashcardManager
			-int activeDeck
			-Button buttonPressed
			-Button newDeck
			-Button importDeck
			-Button editDeck
			-Button deleteDeck
			-Button exportDeck
			-Button statistics
		    -ButtonBar buttonBar
		    -Button addButton
		    -VBox listDeck
		    -Label displayedDescription
		    -Label displayedName
		    +void switchToHomeLearning()
		    +void switchToEditCreation()
		    +void selectNewOrImport()
		    +void importDeck()
		    +void exportDeck()
		    +void deleteDeckeck()
		    +void selectDeck()
		    +void selectStatistics()
		    +void react()
		}
    }

    GameLearningController -[hidden]right- EditCreationController
    EditCreationController -[hidden]right- HomeLearningController
    HomeLearningController -[hidden]right- HomeCreationController
    HomeCreationController -[hidden]right- FlashCardManager

    GameLearningController .down.|> Observer
    EditCreationController .down.|> Observer
    HomeLearningController .down.|> Observer
    HomeCreationController .down.|> Observer

    Observer "*" -down- "1" Observable

    FlashCardManager -up-|> Observable
    FlashCardManager -right- "*" Deck
    Deck -right- "*" Card
    Card -right- "*" Content
    Card -right- "*" Content

    Game "1" -up- FlashCardManager
    Game -up- "1" Deck
    Game -up- "*" Card
    Game -down- "1" StrategyAlgorithm
    StrategyAlgorithm <|.down. GapPriorityMode
    StrategyAlgorithm <|.down. KnownPriorityMode
    StrategyAlgorithm <|.down. RandomMode

@enduml
